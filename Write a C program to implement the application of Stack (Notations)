#include <stdio.h>
#include <ctype.h>
#define MAX 100

char stack[MAX];
int top = -1;

// Push to stack
void push(char c) {
    if (top < MAX - 1)
        stack[++top] = c;
}

// Pop from stack
char pop() {
    if (top >= 0)
        return stack[top--];
    return '\0';
}

// Peek at top
char peek() {
    if (top >= 0)
        return stack[top];
    return '\0';
}

// Operator precedence
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Infix to Postfix function
void infixToPostfix(char infix[]) {
    char postfix[MAX];
    int j = 0;

    for (int i = 0; infix[i] != '\0'; i++) {
        char c = infix[i];

        if (isalnum(c)) {
            postfix[j++] = c; // operand directly to output
        } else if (c == '(') {
            push(c);
        } else if (c == ')') {
            while (peek() != '(')
                postfix[j++] = pop();
            pop(); // remove '('
        } else { // operator
            while (precedence(peek()) >= precedence(c))
                postfix[j++] = pop();
            push(c);
        }
    }

    while (top != -1)
        postfix[j++] = pop();

    postfix[j] = '\0';

    printf("Postfix Expression: %s\n", postfix);
}

int main() {
    char infix[MAX];

    printf("Enter Infix Expression: ");
    scanf("%s", infix);

    infixToPostfix(infix);

    return 0;
}
